// #define ZMK_POINTING_DEFAULT_MOVE_VAL 800 
// #define ZMK_POINTING_DEFAULT_SCRL_VAL 120

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
// #include <dt-bindings/zmk/pointing.h>

#define MOUSE 4
#define SCROLL 5
#define NUM 6

&mt {
    flavor = "balanced";
    quick-tap-ms = <0>;
};

/ {
    combos {
        compatible = "zmk,combos";

        tab {
            bindings = <&mo 1>;
            key-positions = <11 12 0 1>;
            layers = <0 4>;
        };

        shift_tab {
            bindings = <&mo 0>;
            key-positions = <12 13 0 1>;
            require-prior-idle-ms = <0>;
            layers = <1>;
        };

        double_quotation {
            bindings = <&kp DOUBLE_QUOTES>;
            key-positions = <20 21>;
        };

        eq {
            bindings = <&kp EQUAL>;
            key-positions = <24 25>;
        };
    };

    macros {
        to_layer_0: to_layer_0 {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&to 0 &macro_param_1to1 &kp MACRO_PLACEHOLDER>;
            label = "TO_LAYER_0";
        };
    };

    behaviors {
        lt_to_layer_0: lt_to_layer_0 {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_TAP_TO_0";
            bindings = <&mo>, <&to_layer_0>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp Q       &kp W    &kp E             &kp R         &kp T                                 &kp Y          &kp U  &kp I      &kp O       &kp P
&kp A       &kp S    &kp D             &kp F         &kp G                                 &kp H          &kp J  &kp K      &kp L       &kp ENTER
&kp Z       &kp X    &kp C             &kp V         &kp B                                 &kp N          &kp M  &kp COMMA  &kp PERIOD  &kp LEFT_SHIFT
                     &kp LEFT_CONTROL  &kp LEFT_GUI  &lt 1 SPACE                           &lt 2 SPACE    &kp LEFT_ALT      &kp BACKSPACE                                
            >;

        };

        FUNCTION {
            bindings = <
&kp N1           &kp N2       &kp N3        &kp N4        &kp N5                            &kp N6         &kp N7        &kp N8                &kp N9                 &kp N0
&kp EXCLAMATION  &kp AT_SIGN  &kp HASH      &kp DOLLAR    &kp PERCENT                       &kp AMPERSAND  &kp SQT       &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp ENTER
&kp PLUS         &kp MINUS    &kp ASTERISK  &kp SLASH     &kp EQUAL                         &kp TILDE      &kp QUESTION  &kp LEFT_BRACKET      &kp RIGHT_BRACKET      &kp QUESTION
                     &kp LEFT_CONTROL  &kp LEFT_GUI  &lt 1 SPACE                           &lt 2 SPACE    &kp LEFT_ALT      &kp BACKSPACE     
            >;
        };

        NUM {
            bindings = <
&kp F1       &kp F2     &kp F3             &kp F4         &kp F5                             &kp Y          &kp U           &kp I           &kp O            &kp P
&kp AT_SIGN  &kp SQT    &kp DOUBLE_QUOTES  &kp SEMICOLON  &kp COLON                          &kp LEFT       &kp DOWN_ARROW  &kp UP_ARROW    &kp RIGHT        &kp ENTER
&kp Z        &kp X      &kp C              &kp V          &kp B                              &kp LC(SPACE)  &kp RG(SPACE)   &kp LEFT_BRACE  &kp RIGHT_BRACE  &kp SLASH
                     &kp LEFT_CONTROL  &kp LEFT_GUI  &lt 1 SPACE                           &lt 2 SPACE    &kp LEFT_ALT      &kp BACKSPACE   
            >;
        };

        ARROW {
            bindings = <
&kp Q       &kp W    &kp E             &kp R         &kp T                                 &kp Y          &kp U  &kp I      &kp O       &kp P
&kp A       &kp S    &kp D             &kp F         &kp G                                 &kp H          &kp J  &kp K      &kp L       &kp ENTER
&kp Z       &kp X    &kp C             &kp V         &kp B                                 &kp N          &kp M  &kp COMMA  &kp PERIOD  &kp LEFT_SHIFT
                     &kp LEFT_CONTROL  &kp LEFT_GUI  &lt 1 SPACE                           &lt 2 SPACE    &kp LEFT_ALT      &kp BACKSPACE          
            >;
        };

        MOUSE {
            bindings = <
&kp Q       &kp W    &kp E             &kp R         &kp T                                 &kp Y          &kp U  &kp I      &kp O       &kp P
&kp A       &kp S    &kp D             &kp F         &kp G                                 &kp H          &kp J  &kp K      &kp L       &kp ENTER
&kp Z       &kp X    &kp C             &kp V         &kp B                                 &kp N          &kp M  &kp COMMA  &kp PERIOD  &kp LEFT_SHIFT
                     &kp LEFT_CONTROL  &kp LEFT_GUI  &lt 1 SPACE                           &lt 2 SPACE    &kp LEFT_ALT      &kp BACKSPACE          
            >;
        };

        SCROLL {
            bindings = <
&kp Q       &kp W    &kp E             &kp R         &kp T                                 &kp Y          &kp U  &kp I      &kp O       &kp P
&kp A       &kp S    &kp D             &kp F         &kp G                                 &kp H          &kp J  &kp K      &kp L       &kp ENTER
&kp Z       &kp X    &kp C             &kp V         &kp B                                 &kp N          &kp M  &kp COMMA  &kp PERIOD  &kp LEFT_SHIFT
                     &kp LEFT_CONTROL  &kp LEFT_GUI  &lt 1 SPACE                           &lt 2 SPACE    &kp LEFT_ALT      &kp BACKSPACE          
            >;
        };

        layer_6 {
            bindings = <
&kp Q       &kp W    &kp E             &kp R         &kp T                                 &kp Y          &kp U  &kp I      &kp O       &kp P
&kp A       &kp S    &kp D             &kp F         &kp G                                 &kp H          &kp J  &kp K      &kp L       &kp ENTER
&kp Z       &kp X    &kp C             &kp V         &kp B                                 &kp N          &kp M  &kp COMMA  &kp PERIOD  &kp LEFT_SHIFT
                     &kp LEFT_CONTROL  &kp LEFT_GUI  &lt 1 SPACE                           &lt 2 SPACE    &kp LEFT_ALT      &kp BACKSPACE          
            >;
        };
    };
};